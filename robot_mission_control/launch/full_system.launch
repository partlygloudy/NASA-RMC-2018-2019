<launch>

    <!-- ######################
          DECLARE EACH MACHINE
         ###################### -->

    <!-- Declare raspberry pi as a machine to run nodes on-->
    <machine name="rpi" address="192.168.0.105" user="vur" password="theswapbot" env-loader="~/catkin_ws/devel/robot_ros_env.sh"/>
    <machine name="jetson" address="192.168.0.103" user="vur" password="theswapbot" env-loader="~/catkin_ws/deve_isolatedl/robot_ros_env.sh"/>

    <!-- #####################
          LAUNCH JETSON NODES
         ##################### -->

    <group>

        <!--Transform publisher -->
        <param name="tf_file_static" value="one_board_only.json"/>
        <param name="tf_file_dynamic" value="one_board_only.json"/>
        <node name="transform_publisher" pkg="robot_misc_tools" type="transform_publisher.py"/>

        <!-- Drive motor control node - translates twist message into individual motor speeds -->
        <param name="wheel_separation" type="double" value="0.305"/>
        <param name="wheel_radius" type="double" value="0.1525"/>
        <param name="max_in_lin_vel" type="double" value="1.0"/>
        <param name="max_in_ang_vel" type="double" value="1.0"/>
        <param name="max_out_lin_vel" type="double" value="1.0"/>
        <param name="max_out_ang_vel" type="double" value="1.0"/>
        <param name="output_mode" type="string" value="vel"/>
        <param name="queue_size" type="int" value="15"/>
        <node name="drive_speed_conversion" pkg="robot_navigation" type="drive_speed_conversion.py"/>

        <!-- Path following -->
        <param name="pp_base_lin_vel" value="0.25"/>
        <param name="pp_max_lookahead" value="0.3"/>
        <param name="pp_world_frame_id" value="world"/>
        <param name="pp_robot_frame_id" value="robot_center"/>
        <param name="pp_aruco_frame_id" value="aruco_board_origin"/>
        <node name="path_following" pkg="robot_navigation" type="pure_pursuit.py"/>

        <!-- Path planning -->
        <param name="goal_point_topic" value="goal_point"/>
        <param name="path_topic" value="cur_path"/>
        <param name="map_topic" value="test_map"/>
        <node name="path_planning" pkg="robot_navigation" type="path_planning.py"/>


        <!-- Update node - reads mission control messages and updates them at a slower rate -->
        <!--<param name="update_rate" type="int" value="1"/>-->
        <!--<node name="update_publisher" pkg="robot_misc_tools" type="update_publisher.py"/>-->

        <!--&lt;!&ndash; Run all the nodes required for localization &ndash;&gt;-->

        <!-- parameters for image_publisher node -->
        <param name="device_id" value="0"/>
        <param name="calibration_file" value="camera_a.yaml"/>
        <param name="publish_rate" value="10"/>
        <param name="image_width" value="640"/>
        <param name="image_height" value="480"/>

        <!--<node name="image_publisher" pkg="robot_sensors" type="image_publisher.py"/>-->
        <!--<node name="aruco" pkg="robot_slam" type="aruco_localization.py"/>-->

        <!-- EKF for improved robot pose estimation -->
        <param name="unfiltered_pose_topic" value="robot_pose_sim"/>
        <node name="robot_pose_ekf" pkg="robot_slam" type="robot_pose_ekf.py"/>

        <!-- Start state machine -->
        <param name="goal_reached" value="false"/>
        <param name="digging_complete" value="false"/>
        <node name="high_level_controller" pkg="robot_high_level_control" type="state_machine.py" />

        <!-- Nodes for simulation / debugging purposes only -->
        <node name="path_tracking_sim" pkg="robot_simulation" type="path_tracking_sim.py" />
        <node name="test_map_publisher" pkg="robot_simulation" type="test_map_publisher.py" />

        <!-- Start state machine -->
        <!-- param name="dig_angle" value="unkown"/ -->
        <!-- param name="dig_velocity" value="unknown"/ -->
        <!-- param name="dig_complete" value="false"/ -->

        <!-- node name="DIG CONTROLLER" pkg="DIG CONTROLLER" type="DIG CONTROLLER" / -->


    </group>



    <!-- ##################
          LAUNCH RPI NODES
         ################## -->

    <group>

        <!-- Motor_control node - runs on raspberry pi -->
        <rosparam command="load" file="$(find robot_motor_control)/launch/full_system.yaml" />
        <node machine="rpi" pkg="robot_motor_control" type="motor_control_node" name="motor_control" respawn="false"/>

    </group>



    <!-- #####################
          LAUNCH LAPTOP NODES
         ##################### -->

    <group>

        <!--&lt;!&ndash; Joy node - reads data from joystick and publishes joy commands &ndash;&gt;-->
        <!--<node name="joystick" pkg="joy" type="joy_node"/>-->

        <!--&lt;!&ndash; Teleop control node - reads joy command, publishes Twist message &ndash;&gt;-->
        <!--<node name="teleop_control" pkg="robot_mission_control" type="teleop_control.py"/>-->

        <!-- Field Visualization -->
        <node name="field_visualization" pkg="robot_simulation" type="field_visualization.py"/>
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find robot_simulation)/rviz/competition_config.rviz"/>

    </group>

</launch>